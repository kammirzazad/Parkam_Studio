 char[] trim  = {' '};
        char[] trim2 = {'\n'};
        System.Threading.Thread auto;

        private ArrayList PMOVs = new ArrayList();
        private ArrayList PMVIs = new ArrayList();
        private ArrayList JUMPs = new ArrayList();
        private ArrayList Labels = new ArrayList();
        private ArrayList available = new ArrayList();
        private ArrayList multiple = new ArrayList();
        private ArrayList UsedAddress = new ArrayList();
        private ArrayList One_Byte_Instruction = new ArrayList();


private int Analyze_Line(string line, string text, int Line_Number)
        {
            Queue words = new Queue();

            string[] line_words = line.Split(trim, StringSplitOptions.RemoveEmptyEntries);

            for (int i = 0; i < line_words.Length; i++)
            {
                if (!String.IsNullOrWhiteSpace(line_words[i]))
                {
                    char temp = line_words[i][line_words[i].Length - 1];

                    if (temp == '\n' | temp == '\r' | temp == ' ')
                    {
                        line_words[i] = line_words[i].Substring(0, line_words[i].Length - 1);

                        if (!String.IsNullOrWhiteSpace(line_words[i]))
                        {
                            words.Enqueue(line_words[i]);
                        }
                    }
                    else
                    {
                        words.Enqueue(line_words[i]);
                    }
                }
            }

            if (words.Count == 0)
            {
                return -1;
            }

            string first_word = ((string)words.Dequeue()).ToUpperInvariant();

            if (first_word[first_word.Length - 1] == ':')
            {
                if (multiple.Contains(first_word.Substring(0, first_word.Length - 1)))
                {
                    multiple.Remove(first_word.Substring(0, first_word.Length - 1));
                }
                else if (Labels.Contains(first_word.Substring(0, first_word.Length - 1)))
                {
                    listBox1.Items.Add("Error in Line " + Line_Number.ToString() + " : This label is used before");
                    return -1;
                }
                else
                {
                    Labels.Add(first_word.Substring(0, first_word.Length - 1));
                }

                if (words.Count == 0)
                {
                    listBox1.Items.Add("Error in Line " + Line_Number.ToString() + " : Label can't point to empty location");
                    return -1;
                }

                first_word = ((string)words.Dequeue()).ToUpperInvariant();

            }

            if (first_word == ".ORG")
            {
                if (words.Count == 0)
                {
                    listBox1.Items.Add("Error in Line " + Line_Number.ToString() + " : Expected address after .org pseudo instruction ");
                    return -1;
                }
                else if (words.Count > 1)
                {
                    listBox1.Items.Add("Error in Line " + Line_Number.ToString() + " : Unrecognized word(s) after .org address ");
                    return -1;
                }
                else
                {
                    int temp = Validate_Address((string)words.Dequeue(), Line_Number);

                    if (temp == -1)
                    {
                        listBox1.Items.Add("Error in Line " + Line_Number.ToString() + " : Unrecognized address after .org pseudo instruction");
                        return -1;
                    }
                    else
                    {
                        return temp;
                    }
                }
            }

            if (One_Byte_Instruction.Contains(first_word))
            {
                if (words.Count != 0)
                {
                    listBox1.Items.Add("Error in Line " + Line_Number.ToString() + " : Unexpected word after one byte instruction (" + words.Dequeue() + ")");
                    return -1;
                }
                else
                {
                    return 1;
                }
            }
            else if (first_word == "PMOV")
            {
                if (words.Count == 0)
                {
                    listBox1.Items.Add("Error in Line " + Line_Number.ToString() + " : Expected register names after PMOV instruction ");
                    return -1;
                }
                else if (!PMOVs.Contains(((string)words.Dequeue()).ToUpperInvariant()))
                {
                    listBox1.Items.Add("Error in Line " + Line_Number.ToString() + " : Unrecognized register names after PMOV instruction ");
                    return -1;
                }
                else
                {
                    return 1;
                }
            }
            else if (first_word == "PMVI")
            {
                if (words.Count == 0)
                {
                    listBox1.Items.Add("Error in Line " + Line_Number.ToString() + " : Expected register name after PMOV instruction ");
                    return -1;
                }
                else if (!PMVIs.Contains(((string)words.Dequeue()).ToUpperInvariant()))
                {
                    listBox1.Items.Add("Error in Line " + Line_Number.ToString() + " : Unrecognized register name after PMVI instruction ");
                    return -1;
                }
                else
                {
                    if (words.Count == 0)
                    {
                        listBox1.Items.Add("Error in Line " + Line_Number.ToString() + " : Expected data after register name ");
                        return -1;
                    }
                    else if (!Validate_Data(((string)words.Dequeue()).ToUpperInvariant(), Line_Number))
                    {
                        listBox1.Items.Add("Error in Line " + Line_Number.ToString() + " : Unrecognized data after PMVI instruction");
                        return -1;
                    }
                    else
                    {
                        return 2;
                    }
                }
            }
            else if (JUMPs.Contains(first_word))
            {
                if (words.Count == 0)
                {
                    listBox1.Items.Add("Error in Line " + Line_Number.ToString() + " : Expected label after jump instruction ");
                    return -1;
                }
                else if (!Labels.Contains(((string)words.Peek())))
                {
                    listBox1.Items.Add("Error in Line " + Line_Number.ToString() + " : Undefined label ( " + words.Dequeue() + " ) ");
                    return -1;
                }
                else
                {
                    return 2;
                }
            }
            else
            {
                listBox1.Items.Add("Error in Line " + Line_Number.ToString() + " : Unrecognized word ( " + first_word + " ) ");
                return -1;
            }
        }


		switch (GetLastWord())
                {
                    case -1:
                        { 
                            if (One_Byte_Instruction.Contains(_Current_Word) | JUMPs.Contains(_Current_Word) | _Current_Word == "PMOV" | _Current_Word == "PMVI" | _Current_Word=="LDA" | _Current_Word=="STA")
                            {
                                Current_Word.ApplyPropertyValue(TextElement.ForegroundProperty, Brushes.Blue);
                            }
                            else if (_Current_Word == ".ORG")
                            {
                                Current_Word.ApplyPropertyValue(TextElement.ForegroundProperty, Brushes.Violet);
                            }
                            else if (_Current_Word.IndexOf(':') == ((_Current_Word.Length == 0) ? -2 : _Current_Word.Length - 1))
                            {
                                Current_Word.ApplyPropertyValue(TextElement.ForegroundProperty, Brushes.Violet);
                            }
                            else
                            {
                                Current_Word.ApplyPropertyValue(TextElement.ForegroundProperty, Brushes.Black);
                            }

                            Refresh_AutoComplete(_Current_Word, -1);

                            break;
                        }

                    case 0:
                        {
                            Current_Word.ApplyPropertyValue(TextElement.ForegroundProperty, Brushes.Black);
                            break;
                        }

                    case 1:
                        {
                            Current_Word.ApplyPropertyValue(TextElement.ForegroundProperty, Brushes.Violet);
                            break;
                        }

                    case 2:
                        {
                            Current_Word.ApplyPropertyValue(TextElement.ForegroundProperty, Brushes.Orange);
                            Refresh_AutoComplete(_Current_Word , 2);
                            break;
                        }

                    case 3:
                        {
                            Current_Word.ApplyPropertyValue(TextElement.ForegroundProperty, Brushes.Orange);
                            Refresh_AutoComplete(_Current_Word , 3);
                            break;
                        }

                    case 4:
                        {
                            Current_Word.ApplyPropertyValue(TextElement.ForegroundProperty, Brushes.Orange);
                            break;
                        }

                    case 5:
                        {
                            Current_Word.ApplyPropertyValue(TextElement.ForegroundProperty, Brushes.Orange);
                            Refresh_AutoComplete(_Current_Word , 5);
                            break;
                        }

                    case 6:
                        {
                            if (One_Byte_Instruction.Contains(Current_Word.Text.ToUpperInvariant()) | JUMPs.Contains(Current_Word.Text.ToUpperInvariant()) | Current_Word.Text.ToUpperInvariant() == "PMOV" | Current_Word.Text.ToUpperInvariant() == "PMVI")
                            {
                                Current_Word.ApplyPropertyValue(TextElement.ForegroundProperty, Brushes.Blue);
                            }
                            else
                            {
                                Current_Word.ApplyPropertyValue(TextElement.ForegroundProperty, Brushes.Black);
                            }

                            Refresh_AutoComplete(_Current_Word , -1);
                            break;
                        }

                    case 7:
                        {
                            Current_Word.ApplyPropertyValue(TextElement.ForegroundProperty, Brushes.Chartreuse);
                            break;
                        }

                    default:
                        {
                            MessageBox.Show("error");
                            break;
                        }
                }



				private int  GetLastWord         ()
        {
            string temp = new TextRange(this.CaretPosition.GetLineStartPosition(0), this.CaretPosition).Text;//this.CaretPosition.GetTextInRun(LogicalDirection.Backward);
            string back = "";

            if (temp.LastIndexOf(' ') != -1)
            {
                back = temp.Substring(0, temp.LastIndexOf(' '));
                back = back.Substring(back.LastIndexOf(' ') + 1);
            }

            back = back.ToUpperInvariant();

            if (String.IsNullOrWhiteSpace(back))
            {
                return -1;
            }
            else if (back == "A," | back == "X," )
            {
                return 7;
            }
            else if (back.Contains(".ORG"))
            {
                return 1;
            }
            else if (back.Contains("PMOV"))
            {
                return 2;
            }
            else if (back.Contains("PMVI"))
            {
                return 3;
            }
            else if (back.Contains("STA") | back.Contains("LDA"))
            {
                return 4;
            }
            else if (JUMPs.Contains(back.ToUpperInvariant()))
            {
                return 5;
            }
            else if (back.Length != 0)
            {
                if (back[back.Length - 1] == ':')
                {
                    return 6;
                }
            }

            return 0;
        }